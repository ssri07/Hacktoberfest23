import java.util.Stack;

public class PostfixEvaluator {
    public static void main(String[] args) {
        String postfixExpression = "23*5+";
        double result = evaluatePostfix(postfixExpression);
        System.out.println("Result: " + result);
    }

    public static double evaluatePostfix(String expression) {
        Stack<Double> stack = new Stack<>();
        
        for (char c : expression.toCharArray()) {
            if (Character.isDigit(c)) {
                stack.push((double) (c - '0'));
            } else if (isOperator(c)) {
                double operand2 = stack.pop();
                double operand1 = stack.pop();
                double result = performOperation(c, operand1, operand2);
                stack.push(result);
            }
        }
        
        return stack.pop();
    }
    
    public static boolean isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }
    
    public static double performOperation(char operator, double operand1, double operand2) {
        switch (operator) {
            case '+':
                return operand1 + operand2;
            case '-':
                return operand1 - operand2;
            case '*':
                return operand1 * operand2;
            case '/':
                if (operand2 == 0) {
                    throw new ArithmeticException("Division by zero");
                }
                return operand1 / operand2;
            default:
                throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }
}
